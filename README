# Customer Statement Processor
=================================================================

1. Prerequisite, Building and Running
---------------------------------------------------------------
1.1 Prerequisites
	Following softwares and tools are needed to be installed
	* JDK 8
	* Maven 3.5.x
	* Docker (Optional)

1.2 To build and run application
	In the root directory of application, these command are available to build and run
		* Build and package all
			mvn package
		* Build and install all
			mvn install
		* Verify all
			mvn verify
		* Run application after package
			* Alternative-1:
				mvn spring-boot:run
			* Alternative-2:
				java -jar target/customerstatement-0.0.1-SNAPSHOT.jar
			* Alternative-3 (Docker must be installed):
				docker-compose up
	
=================================================================

2. Usages
---------------------------------------------------------------
	* The endpoint to validate the customer statement file synchronous is below. Only POST data is accepted.
		http://localhost:8080/validate
		
	Example success message:
		{
		  "valid": true,
		  "failedRecords": []
		}
	
	Example validation failure message:
		{
		  "valid": false,
		  "failedRecords": [
		    {
		      "reference": 112806,
		      "description": "Candy from Vincent Dekker",
		      "failReason": "NON_UNUIQUE_TRANSACTION"
		    },
		    {
		      "reference": 112806,
		      "description": "Flowers from Erik Dekker",
		      "failReason": "NON_UNUIQUE_TRANSACTION"
		    },
		    {
		      "reference": 172172,
		      "description": "Flowers for Richard Dekker",
		      "failReason": "INVALID_END_BALANCE"
		    }
		  ]
		}
		
	* Basic usages and the informations about the service methods are covered in the application and are able to access:
		http://localhost:8080/swagger-ui.html#/customer-statement-validator-controller
	* Swagger build-in test tool can be used for testing purpose on the documentation page or PostMan could be used as an external tool
	* Sample documents for test purpose are provided under "src/test/resources" directory
	
=================================================================

3. Technical details
---------------------------------------------------------------
	* Application designed as a spring boot application and developed as a rest service
	* Documentations about the services covered by Swagger2 tool and the details about the classes, methods and properties
	are covered by Javadoc documentation.
	* Datasource operations are implemented by using JPARepository approach.
	* To make a clear isolation between Unit Tests and Integration Tests, "**IT.java" class naming convention is used for 
	integration test classes and "**Test.java" class naming convention is used for unit test classes.
	* Docker is used to simplify the run process .
	 
=================================================================

4. Nice To Have
---------------------------------------------------------------
	* Spring Webflux usage would be a better solution.
	* There is no user interface. It would be better to add for a good user experience.
	* Valid and invalid test senarios should be improved.
	* Application was configured to use a memory database for only show the ability, this approach will be benifical for parallel processiong in the future 
	* There is no restriction provided in the application to access to any resource. Endpoints should be access restricted, only the
	authorized users should call some endpoints depend his/her roles.
	* Api documentations, which generated by Swagger2, should be more detailed. Providing some sample requests and responses would be
	clarified the api users.
=================================================================
